Primitives:
- Numbers
- Strings
- Boolean
- null
- undefined



Variables:

var variableName = Value;

    - Scoped "current execution context"

        - function greet() {
            for(var i= 0; i< 3; i++) {
                console.log("Hello");
            }
            console.log(i) // print 3
        }

    - Can be reassigned/redeclared
    - Global variables are added to window

let variableName = Value;

    - Block Scoped
        - function greet() {
                for(let i= 0; i< 3; i++) {
                    console.log("Hello");
                }
                console.log(i) // Gives error
            }
    - Not created property on global, window object
    - Can be reassigned
    - Can not be redeclared(in same scope)

const variableName = Value;

    - Can not be reassigned. Not immutable, but variable reference cannot change
    - Block scope
    - Must be initialized with value
    - Not create property on global window object
    - Not be redeclared



 Built-in Methods:

 - Alert
 - Prompt // get input from user
 - console.log()   // print to console


 Boolean Logic

 == Equal to

 === Equal value and type


 Logical Operators:

 && And

 || OR

 ! NOT

 Not: Every value in js inherently truthy or falsy.
    - Ex: !"Hello World", !"", !null, !0, !-1, !NaN
    - Falsy values: false, 0, "", null, undefined, NaN


LOOPS:

while(condition) {
    // code
}

for - loops throuh a block of code numbers of times
for/in - loops throug the properties of an object
for/of - loop through the values of an iterable object


Functions:

function funcName(args){ //code }


//self invoking function expression
(function sayHello() {
    alert("hello!");
})();

Function declaration :
    function funcName(){}
Function expression: 
    var f = function funcName(){}

Notes : 
 - "https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/"
 - Only functions create new scope
 - Hoisting

Arrays(https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays):

var arrayName = [values...];
var arrayName = new Array();

Some of Array Methods:
- pusp/pop => push: add element end and return length of array. pop: remove last item and return removed item.
- shift/unshift => adding(unshift) and removing(shift) front of an array.
- indexOf => index of an item in an array
- slice => copy part of an array
** For more built-in function look array.__proto__ from console.


Objects:

//JSON(Javascript object notation)
var person = {
    name: "PersonName",
    age: PersonAge,
    city: PersonLivedCity
};

- Access property in class => person.name or person["name"]


Creating Objects:

// Empty object and fill it
var person = {};
person.name = PersonName;

// all at once
var person = {
    name: "PersonName",
    age: PersonAge,
    city: PersonLivedCity,
    getCity: function(){
        return this.city;
    }
};

// with constructor of Object
var person = new Object();
person.name = PersonName

// with constructor function
function Person(name, age, city){
    [this.name, this.age, this.city] = [name, age, city]; //unpacking in python
}

underscore.js (https://underscorejs.org/) to call function with _.func()


Prototype:

- All js objects inherit properties and methods from a prototype.
- To add constructor method or properties used prototype.
    Ex:
        function Person(first, last){this.first = first; this.last = last;};
        Person.prototype.age = 5;
        Person.prototype.name = function(){return this.first + this.last}