BACKEND:

- Internet Basics

    - Figure it out what ip address(DNS)
    - Sent request desired IP address to find fast route 
    - Requested server figures out exactly what asking for
    - Server builds up desired content might be pulling info from db
    - Server responds combiantion of HTML, CSS and JS.

- Static vs Dynamic Web Pages

    - Constructed web page on server side is dynamic page.
    - Static web pages run with same HTML, CSS AND JS


- Stacks

    - stackshare.io

    - NodeJS, Express, MongoDB are used in this tutorial(Backend)

- HTTP(Hyper text transfer protocol) Requests

    - GET => Asking data for come back
    - POST => Update or create data 
    - DELETE => Deletion
    

- NodeJS Example 

    - Setup
        var express = require("express"),
            app = express(),
            mongoose = require("mongoose"),
            logger = require("morgan"),
            bodyParser = require("body-parser")

        app.set('view engine', 'ejs');
        app.use(logger('dev'));
        app.use(bodyParser.urlencoded({extend: true}));

    -DB Stuff

        mongoose.connect(MONGODB_URI)
        var dogSchema = new mongoose.Schema({
                    key1: type,
                    key2: type
                });
        var Dog = mongoose.model("Dog", dogSchema)

    - Routes

        app.get("/", function(req,res){
            res.render("home")
        });
        app.get("/dogs", function(req,res){
            Dog.find({}, function(err, dogs){
                res.render("dogs", {dogs: dogs});
            });
        });
        app.post("/createDog", function(req,res){
            Dog.create({
                name: req.body.name,
                breed: req.body.breed
            },function(err, dog){
                res.redirect("/dogs");
            });
        });

        app.listen(3000, function(){
            console.log("Server running on port 3000");
        });